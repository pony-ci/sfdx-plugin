/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type PackageGroup = Package[];

export interface Config {
  extends?: string;
  data?: DataConfig;
  jobs?: Jobs;
  packages?: {
    [k: string]: PackageGroup;
  };
  orgCreate?: OrgCreateConfig;
  replacements?: Replacements;
  /**
   * Define which files and/or metadata types to sort on 'pony:source:sort' command.
   */
  sourceSort?: ("all" | "source" | "none") | [string];
  sourceValidate?: SourceValidate;
  users?: {
    [k: string]: User;
  };
}
export interface DataConfig {
  sObjects?: {
    recordsDir?: string;
    import?: {
      chunkSize?: number;
      deleteBeforeImport?: (false | "reversedOrder") | string[];
      soqlDeleteDir?: string;
      order: string[];
      relationships?: {
        [k: string]: string[];
      };
    };
    export?: {
      soqlExportDir?: string;
      order?: string[] | "reversedOrder";
    };
  };
}
export interface Jobs {
  [k: string]: {
    steps?: (
      | {
          echo: string;
        }
      | {
          env: string;
        }
      | {
          job: string;
        }
      | {
          run: string;
        }
      | {
          sfdx: string;
        }
    )[];
  };
}
export interface Package {
  subscriberPackageId?: string;
  subscriberPackageName: string;
  subscriberPackageNamespace?: string;
  /**
   * ID (starts with 04t) or alias of the package version to install
   */
  subscriberPackageVersionId: string;
  subscriberPackageVersionName?: string | number;
  subscriberPackageVersionNumber?: string | number;
  /**
   * compile all Apex in the org and package, or only Apex in the package
   */
  apexCompile?: "all" | "package";
  /**
   * number of minutes to wait for subscriber package version ID to become available in the target org
   */
  publishWait?: number;
  /**
   * installation key for key-protected package
   */
  installationKey?: string;
  /**
   * security access type for the installed package
   */
  securityType?: "AllUsers" | "AdminsOnly";
  /**
   * the upgrade type for the package installation
   */
  upgradeType?: "DeprecateOnly" | "Mixed" | "Delete";
  /**
   * number of minutes to wait for installation status
   */
  wait?: number;
}
export interface OrgCreateConfig {
  generateUsername?: boolean;
}
export interface Replacements {
  [k: string]: {
    innerText?: InnerTextReplacement;
    orgWideEmailAddress?: OrgWideEmailAddressReplacement;
  };
}
export interface InnerTextReplacement {
  files: string[];
  replacement: string;
  search: string[];
}
export interface OrgWideEmailAddressReplacement {
  files: string[];
  replacement: string;
}
export interface SourceValidate {
  deleteOrg?: boolean | ("always" | "never" | "onSuccess");
  trackedFieldHistory?: boolean | ["error" | "warning" | "info", number, ...string[]];
}
export interface User {
  [k: string]: string | boolean;
}
